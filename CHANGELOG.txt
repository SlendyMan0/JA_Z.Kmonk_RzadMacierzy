Wersja 0.1.1
- dodanie obs³ugi dll x64 dla ASM i C++

Wersja 0.1.2
- dodanie obs³ugi wybranej przez u¿ytkownika iloœci w¹tków

06.11.16 Wersja 0.2.1

- rozpoczêcie prac nad implementacj¹ dll w wersji C++

- dodanie timera licz¹cego czas dzia³ania programu

13.11.16 Wersja 0.2.2 

DLL C++
- poprawienie b³êdów w funkcji licz¹cej wyznacznik macierzy
- dodanie nowej funkcjonalnoœci do funkcji licz¹cej wyznacznik, teraz dzia³a ona dla macierzy z dowoln¹ iloœci¹ wykluczonych rzêdów i kolumn, do póki ich iloœæ jest taka sama
- rozpoczêcie prac nad funkcj¹ licz¹c¹ rz¹d macierzy

MAIN
- dodanie prostego warunku zmuszaj¹cego program do wyjœcia, jeœli zosta³ odpalony przez plik exe bez wymaganej iloœci argumentów

Niestety nie jest to zbyt du¿y update, ale algorytm stosowany przeze mnie do liczenia wyznacznika macierzy nie jest zbyt czytelny bez uprzedniego dok³adnego przeœledzenia. 
G³ówny program chwilowo uruchamia przyk³ad w którym pokazany jest efekt dzia³ania wyznaczania wyznacznika dla macierzy
4 4 4 4
4 2 2 3
4 4 5 6
4 7 8 9
z wykluczeniem pierwszego wiersza oraz pierwszej kolumny.

20.11.16 Wersja 0.2.3

DLL C++
- DLL zwraca rz¹d macierzy wczytanej przez g³ówny program z pliku
- rozpoczête prace nad optymalizacj¹ algorytmu

Zastosowany algorytm dla wypadku najgorszego (du¿a macierz, rzêdu pierwszego) jest doœæ czasoch³onny. Konieczna jest analiza w celu zoptymalizowania prêdkoœci wykonywania programu dla wiêkszych macierzy (ju¿ przy macierzy 7x7 proces przebiega oko³o 30 sekund).

04.12.16 Wersja 0.3.1

MAIN
- sensowne podzielenie zadania na w¹tki
- zmiana w strukturze przesy³anej macierzy, zerowy element zamiast iloœci elementów zawiera teraz wielkoœæ n macierzy kwadratowej nxn

DLL C++
- dostosowanie algorytmu do zmian w strukturze macierzy
- dostosowanie algorytmu do zmian w sferze podzia³u zadania na w¹tki

DLL ASM
- rozpoczêcie prac nad obliczaniem wyznacznika macierzy, z macierzami zamaskowanymi do momentu uzyskania macierzy 1x1 radzi sobie jak marzenie
- rekurencja jeszcze nie zosta³a ruszona

Okazuje siê, ¿e ASM wcale nie jest (przynajmniej na razie) taki z³y na jakiego wygl¹da. Przekonamy siê póŸniej.

11.12.16 Wersja 0.3.2

DLL ASM
- walka z poprawnym napisaniem algorytmu licz¹cego wyznacznik macierzy wiêkszych od 1x1, póki co nie jestem w stanie znaleŸæ b³êdu

08.01.17 Wersja 0.5

DLL ASM
- poprawnie liczy zarówno wyznaczniki jak i rz¹d macierzy
- poprawne wykonywanie na w¹tkach
- do zaimplementowania instrukcje wektorowe

DLL C++
- naprawiono dot¹d niewykryty b³¹d w algorytmie, który mimo braku wyrzucanych b³êdów by³ ci¹gle jednak niedopatrzeniem

14.01.17 Wersja 0.6

DLL C++
- naprawiono kolejny wczeœniej nie wykryty b³¹d w algorytmie

DLL ASM
- naprawione b³êdy w algorytmie
- zastosowane w pasuj¹cych do tego miejscach instrukcje wektorowe

Pozostaje jedynie naprawiæ b³êdy dll'ki ASM w wersji starszej, by móc zrobiæ porównanie ASM z i bez instrukcji wektorowych, oraz wyczyszczenie programu nadzoruj¹cego.

15.01.17 Wersja 0.7

MAIN
- domyœlne wykrywanie iloœci rdzeni i tworzenie takiej iloœci w¹tków
- bardziej "user-friendly" parametry
- zabezpieczanie przed b³êdami u¿ytkownika